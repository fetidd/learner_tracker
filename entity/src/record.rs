//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::entity::prelude::*;
use serde::{Serialize, Deserialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "record")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub pupil: Uuid,
    pub metric: Uuid,
    pub score: i32,
    pub note: Option<String>,
    pub date: Date,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::metric::Entity",
        from = "Column::Metric",
        to = "super::metric::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Metric,
    #[sea_orm(
        belongs_to = "super::pupil::Entity",
        from = "Column::Pupil",
        to = "super::pupil::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Pupil,
}

impl Related<super::metric::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Metric.def()
    }
}

impl Related<super::pupil::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Pupil.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
